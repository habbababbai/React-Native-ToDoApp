{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/habbababbai/Documents/GitHub/React-Native-ToDoApp/src/screens/List/form.tsx\";\nimport React, { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { useDispatch } from 'react-redux';\nimport { listStyles } from \"../../constans/Styles\";\nimport { addTodo } from \"../../actions\";\n\nvar FormScreen = function FormScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      text = _useState4[0],\n      setText = _useState4[1];\n\n  var dispatch = useDispatch();\n\n  var pressHandler = function pressHandler() {\n    if (title == '' && text == '') {\n      Alert.alert('Title and text field cannot be empty');\n    } else if (title == '') {\n      Alert.alert('Title field cannot be empty');\n    } else if (text == '') {\n      Alert.alert('Text field cannot be empty');\n    } else {\n      navigation.pop();\n      dispatch(addTodo(title, text));\n    }\n  };\n\n  return React.createElement(View, {\n    style: listStyles.formContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    }\n  }, React.createElement(Text, {\n    style: listStyles.formText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    }\n  }, \"Title:\"), React.createElement(TextInput, {\n    style: listStyles.titleInput,\n    onChangeText: function onChangeText(title) {\n      return setTitle(title);\n    },\n    value: title,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    }\n  }), React.createElement(Text, {\n    style: listStyles.formText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    }\n  }, \"Text:\"), React.createElement(TextInput, {\n    style: listStyles.textInput,\n    onChangeText: function onChangeText(text) {\n      return setText(text);\n    },\n    value: text,\n    multiline: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: listStyles.addButton,\n    onPress: pressHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    }\n  }, React.createElement(Text, {\n    style: listStyles.addButtonText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    }\n  }, \"Add\")));\n};\n\nexport default FormScreen;","map":{"version":3,"sources":["/Users/habbababbai/Documents/GitHub/React-Native-ToDoApp/src/screens/List/form.tsx"],"names":["React","useState","useDispatch","listStyles","addTodo","FormScreen","navigation","title","setTitle","text","setText","dispatch","pressHandler","Alert","alert","pop","formContainer","formText","titleInput","textInput","addButton","addButtonText"],"mappings":";;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,QAAiC,OAAjC;;;;;;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAT;AACA,SAASC,OAAT;;AAGA,IAAMC,UAAU,GAAG,SAAbA,UAAa,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAAA,kBACPL,QAAQ,CAAC,EAAD,CADD;AAAA;AAAA,MAC1BM,KAD0B;AAAA,MACnBC,QADmB;;AAAA,mBAETP,QAAQ,CAAC,EAAD,CAFC;AAAA;AAAA,MAE1BQ,IAF0B;AAAA,MAEpBC,OAFoB;;AAIjC,MAAMC,QAAQ,GAAGT,WAAW,EAA5B;;AAEA,MAAMU,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,QAAIL,KAAK,IAAI,EAAT,IAAeE,IAAI,IAAI,EAA3B,EAA8B;AAC1BI,MAAAA,KAAK,CAACC,KAAN,CACI,sCADJ;AAGH,KAJD,MAKK,IAAIP,KAAK,IAAI,EAAb,EAAgB;AACjBM,MAAAA,KAAK,CAACC,KAAN,CACI,6BADJ;AAGH,KAJI,MAKA,IAAIL,IAAI,IAAI,EAAZ,EAAe;AAChBI,MAAAA,KAAK,CAACC,KAAN,CACI,4BADJ;AAGH,KAJI,MAKD;AACAR,MAAAA,UAAU,CAACS,GAAX;AACAJ,MAAAA,QAAQ,CAACP,OAAO,CAACG,KAAD,EAAOE,IAAP,CAAR,CAAR;AAEH;AACJ,GArBD;;AAuBA,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEN,UAAU,CAACa,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEb,UAAU,CAACc,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,EAEI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEd,UAAU,CAACe,UAA7B;AAAyC,IAAA,YAAY,EAAE,sBAACX,KAAD;AAAA,aAAWC,QAAQ,CAACD,KAAD,CAAnB;AAAA,KAAvD;AAAmF,IAAA,KAAK,EAAEA,KAA1F;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,UAAU,CAACc,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,aAHJ,EAII,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAEd,UAAU,CAACgB,SAA7B;AAAwC,IAAA,YAAY,EAAE,sBAACV,IAAD;AAAA,aAAUC,OAAO,CAACD,IAAD,CAAjB;AAAA,KAAtD;AAA+E,IAAA,KAAK,EAAEA,IAAtF;AAA4F,IAAA,SAAS,EAAE,IAAvG;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,EAKI,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEN,UAAU,CAACiB,SAApC;AAA+C,IAAA,OAAO,EAAER,YAAxD;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAET,UAAU,CAACkB,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,WADJ,CALJ,CADJ;AAWH,CAxCD;;AA4CA,eAAehB,UAAf","sourcesContent":["import React, {  useState } from 'react';\nimport { Text, View, TextInput, TouchableOpacity, Alert } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { listStyles } from '../../constans/Styles';\nimport { addTodo } from '../../actions';\n\n\nconst FormScreen = ({navigation}) => {\n    const [title, setTitle] = useState(\"\");\n    const [text, setText] = useState(\"\");\n    \n    const dispatch = useDispatch();\n    \n    const pressHandler = () => {\n        if (title == '' && text == ''){\n            Alert.alert(\n                'Title and text field cannot be empty'\n            )\n        }\n        else if (title == ''){\n            Alert.alert(\n                'Title field cannot be empty'\n            )\n        }\n        else if (text == ''){\n            Alert.alert(\n                'Text field cannot be empty'\n            )\n        }\n        else{\n            navigation.pop();\n            dispatch(addTodo(title,text));\n            \n        }\n    }\n    //onPress={() => {dispatch({type: 'ADD_TODO', title, text}), pressHandler}}\n    return (\n        <View style={listStyles.formContainer}>\n            <Text style={listStyles.formText}>Title:</Text>\n            <TextInput style={listStyles.titleInput} onChangeText={(title) => setTitle(title)} value={title}></TextInput>\n            <Text style={listStyles.formText}>Text:</Text>\n            <TextInput style={listStyles.textInput} onChangeText={(text) => setText(text)} value={text} multiline={true}></TextInput>\n            <TouchableOpacity style={listStyles.addButton} onPress={pressHandler}>\n                <Text style={listStyles.addButtonText}>Add</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\n\n\nexport default FormScreen;"]},"metadata":{},"sourceType":"module"}